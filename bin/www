#!/usr/bin/env node

var app = require("../app");
var debug = require("debug")("chatroom:server");
var http = require("http");
const socketio = require("socket.io");
const formatMessage = require("../utils/messages");
const {
  userJoin,
  getCurrentUserById,
  userLeave,
  getRoomUsers,
} = require("../utils/users");

const reg1 = RegExp(/💩/);
const reg2 = RegExp(/傻逼/);
const reg3 = RegExp(/习近平/);

var port = normalizePort(process.env.PORT || "4096");
app.set("port", port);
var server = http.createServer(app);
const io = socketio(server);

const botName = "Rick Ashley";

// Begin to emit events
io.on("connection", (socket) => {
  socket.on("joinroom", ({ username, room }) => {
    const user = userJoin(socket.id, username, room);

    socket.join(user.room);
    socket.emit("message", formatMessage(botName, `Welcome! ${user.username}`));

    const hour = new Date().getHours();
    if (hour >= 22 ||0<=hour<=4) {
      socket.emit("message", formatMessage(botName, `Now is ${hour} o'clock, please do not overnight`));
    }

    socket.broadcast
      .to(user.room)
      .emit(
        "message",
        formatMessage(botName, `${user.username} has joined the room`)
      );

    //Send users and room information
    io.to(user.room).emit("roomUsers", {
      room: user.room,
      users: getRoomUsers(user.room),
    });
  });

  // Listen for chat messages
  socket.on("chatMsg", (msg) => {
    const user = getCurrentUserById(socket.id);

    io.to(user.room).emit("message", formatMessage(user.username, msg));
    if (msg.match(reg1)) {
      io.emit(
        "message",
        formatMessage(botName, `@${user.username}, 你💩你🐎呢`)
      );
    }
    if (msg.match(reg2)) {
      io.emit("message", formatMessage(botName, `@${user.username}, 反弹！`));
    }
    if (msg.match(reg3)) {
      io.emit("message", formatMessage(botName, `@${user.username}, 😭`));
    }
  });

  // Runs when client disconnects
  socket.on("disconnect", () => {
    const user = userLeave(socket.id);

    if (user) {
      io.to(user.room).emit(
        "message",
        formatMessage(botName, `${user.username} has left the room`)
      );
      io.to(user.room).emit("roomUsers", {
        room: user.room,
        users: getRoomUsers(user.room),
      });
    }
  });
});

/**
 * Listen on provided port, on all network interfaces
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
